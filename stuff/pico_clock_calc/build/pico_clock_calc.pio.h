// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------------- //
// inhibited_signal //
// ---------------- //

#define inhibited_signal_wrap_target 0
#define inhibited_signal_wrap 10

static const uint16_t inhibited_signal_program_instructions[] = {
            //     .wrap_target
    0xa0c3, //  0: mov    isr, null                  
    0xe03e, //  1: set    x, 30                      
    0x00c1, //  2: jmp    pin, 1                     
    0x00c1, //  3: jmp    pin, 1                     
    0x0042, //  4: jmp    x--, 2                     
    0xc000, //  5: irq    nowait 0                   
    0x20a1, //  6: wait   1 pin, 1                   
    0x4001, //  7: in     pins, 1                    
    0xa046, //  8: mov    y, isr                     
    0x0060, //  9: jmp    !y, 0                      
    0xc001, // 10: irq    nowait 1                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program inhibited_signal_program = {
    .instructions = inhibited_signal_program_instructions,
    .length = 11,
    .origin = -1,
};

static inline pio_sm_config inhibited_signal_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + inhibited_signal_wrap_target, offset + inhibited_signal_wrap);
    return c;
}
#endif

// -------------- //
// device_to_host //
// -------------- //

#define device_to_host_wrap_target 0
#define device_to_host_wrap 14

static const uint16_t device_to_host_program_instructions[] = {
            //     .wrap_target
    0x00c0, //  0: jmp    pin, 0                     
    0xa0c3, //  1: mov    isr, null                  
    0x2021, //  2: wait   0 pin, 1                   
    0x20a1, //  3: wait   1 pin, 1                   
    0xe027, //  4: set    x, 7                       
    0x2121, //  5: wait   0 pin, 1               [1] 
    0x4001, //  6: in     pins, 1                    
    0x21a1, //  7: wait   1 pin, 1               [1] 
    0x0045, //  8: jmp    x--, 5                     
    0x2121, //  9: wait   0 pin, 1               [1] 
    0x01c0, // 10: jmp    pin, 0                 [1] 
    0x8000, // 11: push   noblock                    
    0x20a1, // 12: wait   1 pin, 1                   
    0x2121, // 13: wait   0 pin, 1               [1] 
    0x20a1, // 14: wait   1 pin, 1                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program device_to_host_program = {
    .instructions = device_to_host_program_instructions,
    .length = 15,
    .origin = -1,
};

static inline pio_sm_config device_to_host_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + device_to_host_wrap_target, offset + device_to_host_wrap);
    return c;
}
#endif

// -------------- //
// host_to_device //
// -------------- //

#define host_to_device_wrap_target 0
#define host_to_device_wrap 15

static const uint16_t host_to_device_program_instructions[] = {
            //     .wrap_target
    0xa0c3, //  0: mov    isr, null                  
    0xe025, //  1: set    x, 5                       
    0x00c1, //  2: jmp    pin, 1                     
    0x0042, //  3: jmp    x--, 2                     
    0x20a1, //  4: wait   1 pin, 1                   
    0x2021, //  5: wait   0 pin, 1                   
    0xe027, //  6: set    x, 7                       
    0x21a1, //  7: wait   1 pin, 1               [1] 
    0x4001, //  8: in     pins, 1                    
    0x2121, //  9: wait   0 pin, 1               [1] 
    0x0047, // 10: jmp    x--, 7                     
    0x21a1, // 11: wait   1 pin, 1               [1] 
    0x8000, // 12: push   noblock                    
    0x2021, // 13: wait   0 pin, 1                   
    0x21a1, // 14: wait   1 pin, 1               [1] 
    0x2121, // 15: wait   0 pin, 1               [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program host_to_device_program = {
    .instructions = host_to_device_program_instructions,
    .length = 16,
    .origin = -1,
};

static inline pio_sm_config host_to_device_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + host_to_device_wrap_target, offset + host_to_device_wrap);
    return c;
}
#endif

// ----------- //
// idle_signal //
// ----------- //

#define idle_signal_wrap_target 0
#define idle_signal_wrap 6

static const uint16_t idle_signal_program_instructions[] = {
            //     .wrap_target
    0xe03e, //  0: set    x, 30                      
    0xa0e8, //  1: mov    osr, !pins                 
    0x6042, //  2: out    y, 2                       
    0x0065, //  3: jmp    !y, 5                      
    0x0000, //  4: jmp    0                          
    0x0041, //  5: jmp    x--, 1                     
    0xc000, //  6: irq    nowait 0                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program idle_signal_program = {
    .instructions = idle_signal_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config idle_signal_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + idle_signal_wrap_target, offset + idle_signal_wrap);
    return c;
}
#endif

// ------------------------------- //
// two_pin_mirror_reverse_inverter //
// ------------------------------- //

#define two_pin_mirror_reverse_inverter_wrap_target 0
#define two_pin_mirror_reverse_inverter_wrap 2

static const uint16_t two_pin_mirror_reverse_inverter_program_instructions[] = {
            //     .wrap_target
    0x4002, //  0: in     pins, 2                    
    0xa056, //  1: mov    y, ::isr                   
    0xa00a, //  2: mov    pins, !y                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program two_pin_mirror_reverse_inverter_program = {
    .instructions = two_pin_mirror_reverse_inverter_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config two_pin_mirror_reverse_inverter_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + two_pin_mirror_reverse_inverter_wrap_target, offset + two_pin_mirror_reverse_inverter_wrap);
    return c;
}
#endif

// ---------------- //
// two_pin_inverter //
// ---------------- //

#define two_pin_inverter_wrap_target 0
#define two_pin_inverter_wrap 0

static const uint16_t two_pin_inverter_program_instructions[] = {
            //     .wrap_target
    0xa008, //  0: mov    pins, !pins                
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program two_pin_inverter_program = {
    .instructions = two_pin_inverter_program_instructions,
    .length = 1,
    .origin = -1,
};

static inline pio_sm_config two_pin_inverter_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + two_pin_inverter_wrap_target, offset + two_pin_inverter_wrap);
    return c;
}
#endif

// -------------- //
// two_pin_mirror //
// -------------- //

#define two_pin_mirror_wrap_target 0
#define two_pin_mirror_wrap 0

static const uint16_t two_pin_mirror_program_instructions[] = {
            //     .wrap_target
    0xa000, //  0: mov    pins, pins                 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program two_pin_mirror_program = {
    .instructions = two_pin_mirror_program_instructions,
    .length = 1,
    .origin = -1,
};

static inline pio_sm_config two_pin_mirror_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + two_pin_mirror_wrap_target, offset + two_pin_mirror_wrap);
    return c;
}
#endif

// --------------- //
// two_pin_reverse //
// --------------- //

#define two_pin_reverse_wrap_target 0
#define two_pin_reverse_wrap 1

static const uint16_t two_pin_reverse_program_instructions[] = {
            //     .wrap_target
    0x4002, //  0: in     pins, 2                    
    0xa016, //  1: mov    pins, ::isr                
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program two_pin_reverse_program = {
    .instructions = two_pin_reverse_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config two_pin_reverse_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + two_pin_reverse_wrap_target, offset + two_pin_reverse_wrap);
    return c;
}
#endif

// -------------------- //
// glitch_det_fast_rise //
// -------------------- //

#define glitch_det_fast_rise_wrap_target 0
#define glitch_det_fast_rise_wrap 6

static const uint16_t glitch_det_fast_rise_program_instructions[] = {
            //     .wrap_target
    0xe03f, //  0: set    x, 31                      
    0x20a0, //  1: wait   1 pin, 0                   
    0x2020, //  2: wait   0 pin, 0                   
    0x00c6, //  3: jmp    pin, 6                     
    0x0043, //  4: jmp    x--, 3                     
    0x0000, //  5: jmp    0                          
    0x4020, //  6: in     x, 32                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program glitch_det_fast_rise_program = {
    .instructions = glitch_det_fast_rise_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config glitch_det_fast_rise_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + glitch_det_fast_rise_wrap_target, offset + glitch_det_fast_rise_wrap);
    return c;
}
#endif

// -------------------- //
// glitch_det_fast_fall //
// -------------------- //

#define glitch_det_fast_fall_wrap_target 0
#define glitch_det_fast_fall_wrap 6

static const uint16_t glitch_det_fast_fall_program_instructions[] = {
            //     .wrap_target
    0xe03f, //  0: set    x, 31                      
    0x2020, //  1: wait   0 pin, 0                   
    0x20a0, //  2: wait   1 pin, 0                   
    0x00c6, //  3: jmp    pin, 6                     
    0x4020, //  4: in     x, 32                      
    0x0000, //  5: jmp    0                          
    0x0043, //  6: jmp    x--, 3                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program glitch_det_fast_fall_program = {
    .instructions = glitch_det_fast_fall_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config glitch_det_fast_fall_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + glitch_det_fast_fall_wrap_target, offset + glitch_det_fast_fall_wrap);
    return c;
}
#endif

// ------------ //
// rise_counter //
// ------------ //

#define rise_counter_wrap_target 0
#define rise_counter_wrap 5

static const uint16_t rise_counter_program_instructions[] = {
            //     .wrap_target
    0xa02b, //  0: mov    x, !null                   
    0x20a0, //  1: wait   1 pin, 0                   
    0x2020, //  2: wait   0 pin, 0                   
    0x00c5, //  3: jmp    pin, 5                     
    0x0043, //  4: jmp    x--, 3                     
    0x4020, //  5: in     x, 32                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program rise_counter_program = {
    .instructions = rise_counter_program_instructions,
    .length = 6,
    .origin = -1,
};

static inline pio_sm_config rise_counter_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + rise_counter_wrap_target, offset + rise_counter_wrap);
    return c;
}
#endif

// ------------ //
// fall_counter //
// ------------ //

#define fall_counter_wrap_target 0
#define fall_counter_wrap 6

static const uint16_t fall_counter_program_instructions[] = {
            //     .wrap_target
    0xa02b, //  0: mov    x, !null                   
    0x2020, //  1: wait   0 pin, 0                   
    0x20a0, //  2: wait   1 pin, 0                   
    0x00c5, //  3: jmp    pin, 5                     
    0x0006, //  4: jmp    6                          
    0x0043, //  5: jmp    x--, 3                     
    0x4020, //  6: in     x, 32                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program fall_counter_program = {
    .instructions = fall_counter_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config fall_counter_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + fall_counter_wrap_target, offset + fall_counter_wrap);
    return c;
}
#endif

