// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------------- //
// inhibited_signal //
// ---------------- //

#define inhibited_signal_wrap_target 0
#define inhibited_signal_wrap 15

static const uint16_t inhibited_signal_program_instructions[] = {
            //     .wrap_target
    0x20a0, //  0: wait   1 pin, 0                   
    0x00c0, //  1: jmp    pin, 0                     
    0xe030, //  2: set    x, 16                      
    0xa0c3, //  3: mov    isr, null                  
    0x4001, //  4: in     pins, 1                    
    0xa046, //  5: mov    y, isr                     
    0x0060, //  6: jmp    !y, 0                      
    0x00c0, //  7: jmp    pin, 0                     
    0x0043, //  8: jmp    x--, 3                     
    0xc000, //  9: irq    nowait 0                   
    0x20a1, // 10: wait   1 pin, 1                   
    0xa0c3, // 11: mov    isr, null                  
    0x4001, // 12: in     pins, 1                    
    0xa046, // 13: mov    y, isr                     
    0x0060, // 14: jmp    !y, 0                      
    0xc001, // 15: irq    nowait 1                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program inhibited_signal_program = {
    .instructions = inhibited_signal_program_instructions,
    .length = 16,
    .origin = -1,
};

static inline pio_sm_config inhibited_signal_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + inhibited_signal_wrap_target, offset + inhibited_signal_wrap);
    return c;
}
#endif

// -------------- //
// device_to_host //
// -------------- //

#define device_to_host_wrap_target 0
#define device_to_host_wrap 14

static const uint16_t device_to_host_program_instructions[] = {
            //     .wrap_target
    0x00c0, //  0: jmp    pin, 0                     
    0xa0c3, //  1: mov    isr, null                  
    0x2021, //  2: wait   0 pin, 1                   
    0x20a1, //  3: wait   1 pin, 1                   
    0xe027, //  4: set    x, 7                       
    0x2121, //  5: wait   0 pin, 1               [1] 
    0x4001, //  6: in     pins, 1                    
    0x20a1, //  7: wait   1 pin, 1                   
    0x0045, //  8: jmp    x--, 5                     
    0x2021, //  9: wait   0 pin, 1                   
    0x20a1, // 10: wait   1 pin, 1                   
    0x2021, // 11: wait   0 pin, 1                   
    0x20a1, // 12: wait   1 pin, 1                   
    0x00c0, // 13: jmp    pin, 0                     
    0x8020, // 14: push   block                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program device_to_host_program = {
    .instructions = device_to_host_program_instructions,
    .length = 15,
    .origin = -1,
};

static inline pio_sm_config device_to_host_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + device_to_host_wrap_target, offset + device_to_host_wrap);
    return c;
}
#endif

// -------------- //
// host_to_device //
// -------------- //

#define host_to_device_wrap_target 0
#define host_to_device_wrap 14

static const uint16_t host_to_device_program_instructions[] = {
            //     .wrap_target
    0x00c0, //  0: jmp    pin, 0                     
    0xa0c3, //  1: mov    isr, null                  
    0x20a1, //  2: wait   1 pin, 1                   
    0x2021, //  3: wait   0 pin, 1                   
    0xe027, //  4: set    x, 7                       
    0x21a1, //  5: wait   1 pin, 1               [1] 
    0x4001, //  6: in     pins, 1                    
    0x2021, //  7: wait   0 pin, 1                   
    0x0045, //  8: jmp    x--, 5                     
    0x20a1, //  9: wait   1 pin, 1                   
    0x2021, // 10: wait   0 pin, 1                   
    0x20a1, // 11: wait   1 pin, 1                   
    0x2021, // 12: wait   0 pin, 1                   
    0x00c0, // 13: jmp    pin, 0                     
    0x8020, // 14: push   block                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program host_to_device_program = {
    .instructions = host_to_device_program_instructions,
    .length = 15,
    .origin = -1,
};

static inline pio_sm_config host_to_device_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + host_to_device_wrap_target, offset + host_to_device_wrap);
    return c;
}
#endif

// ----------- //
// idle_signal //
// ----------- //

#define idle_signal_wrap_target 0
#define idle_signal_wrap 13

static const uint16_t idle_signal_program_instructions[] = {
            //     .wrap_target
    0x20a0, //  0: wait   1 pin, 0                   
    0x00c3, //  1: jmp    pin, 3                     
    0x0000, //  2: jmp    0                          
    0xe02f, //  3: set    x, 15                      
    0xa0c3, //  4: mov    isr, null                  
    0x4001, //  5: in     pins, 1                    
    0xa046, //  6: mov    y, isr                     
    0x006d, //  7: jmp    !y, 13                     
    0x00ca, //  8: jmp    pin, 10                    
    0x000d, //  9: jmp    13                         
    0x0044, // 10: jmp    x--, 4                     
    0xc000, // 11: irq    nowait 0                   
    0x0000, // 12: jmp    0                          
    0xc001, // 13: irq    nowait 1                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program idle_signal_program = {
    .instructions = idle_signal_program_instructions,
    .length = 14,
    .origin = -1,
};

static inline pio_sm_config idle_signal_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + idle_signal_wrap_target, offset + idle_signal_wrap);
    return c;
}
#endif

